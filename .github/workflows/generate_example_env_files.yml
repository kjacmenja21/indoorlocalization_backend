name: Generate and Commit .example.env Files

on:
  push:
    branches:
      - hotfixes # Trigger on push to the 'main' branch. Adjust as needed.

jobs:
  generate-env-files:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Explicitly grants write access
      pull-requests: write # Grants permission to create PRs
    env: # Declare the environment variable explicitly
      BRANCH_NAME: update-env-files-${{ github.run_id }} # Use GitHub's run ID for uniqueness
    steps:
      # Step 1: Check out the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11.4" # Use the Python version you need

      # Step 3: Install Poetry
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          export PATH="$HOME/.local/bin:$PATH"

      # Step 4: Install dependencies using Poetry
      - name: Install dependencies
        run: |
          poetry install --no-root

      # Step 5: Run the script to generate .example.env files
      - name: Run script to generate .example.env
        run: |
          poetry run python cicd/generate_env_example.py # Updated path to script

      # Step 6: Debug file changes
      - name: Debug file changes
        run: |
          echo "Checking for .example.env files:"
          ls -l .example.env* || echo "No .example.env files found"
          echo "Displaying diff:"
          git diff || echo "No differences found"

      # Step 7: Commit and push changes
      - name: Commit and push changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # Create a new branch
          git checkout -b "${{ env.BRANCH_NAME }}"

          # Add and commit changes
          git add .example.env*
          if git diff --cached --quiet; then
            echo "No changes to commit"
            exit 0
          else
            git commit -m "Update .example.env files"
            git push origin "${{ env.BRANCH_NAME }}"
          fi

      # Step 8: Debug branch existence
      - name: Debug branch existence
        run: |
          echo "Listing remote branches:"
          git branch -r

      # Step 9: Install GitHub CLI
      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh

      # Step 10: Authenticate with GitHub CLI
      - name: Authenticate with GitHub CLI
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      # Step 11: Ensure 'automation' label exists
      - name: Ensure 'automation' label exists
        run: |
          gh label create automation --description "Automated PRs" --color "00FF00" || echo "Label already exists"

      # Step 12: Create Pull Request using GitHub CLI
      - name: Create Pull Request
        run: |
          if gh pr create \
            --base main \
            --head "${{ env.BRANCH_NAME }}" \
            --title "Update .example.env files" \
            --body "This pull request was automatically created to update the \`.example.env\` files. Please review and merge as necessary." \
            --label automation; then
            echo "Pull request created successfully."
          else
            echo "Failed to create pull request. No changes to commit or branch issue."
            exit 0
          fi
